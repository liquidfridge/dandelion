<?php

/**
 * @file
 * Dandelion
 *
 * @author Hein Bekker <hein@netbek.co.za>
 * @copyright (c) 2015 Hein Bekker
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GPLv2
 */

/**
 * Implements hook_menu().
 */
function dandelion_menu() {
  $items = array();
  $path = drupal_get_path('module', 'dandelion');

  $items['admin/config/dandelion'] = array(
    'title' => 'Dandelion',
    'description' => 'Configure Dandelion.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dandelion_admin_settings'),
    'access arguments' => array('administer dandelion'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dandelion.admin.inc',
    'file path' => $path,
  );

  $items['admin/config/dandelion/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure Dandelion settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dandelion_admin_settings'),
    'access arguments' => array('administer dandelion'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'dandelion.admin.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function dandelion_menu_alter(&$items) {
  // Remove RSS feed from head.
  $items['rss.xml']['page callback'] = 'drupal_not_found';
}

/**
 * Implements hook_html_head_alter().
 */
function dandelion_html_head_alter(&$head_elements) {
  foreach (array_keys($head_elements) as $key) {
    // Remove RSS feed from head.
    if (strstr($key, 'rss.xml')) {
      unset($head_elements[$key]);
    }
  }
}

/**
 * Implements hook_permission().
 */
function dandelion_permission() {
  return array(
    'administer dandelion' => array(
      'title' => t('Administer Dandelion'),
      'description' => t('Allows users to change the Dandelion settings.'),
    ),
  );
}

///**
// * Implement hook_ctools_plugin_api().
// */
//function dandelion_ctools_plugin_api($module, $api) {
//  if (($module == 'page_manager' && $api == 'pages_default') || ($module == 'panels_mini' && $api == 'panels_default')) {
//    return array(
//      'version' => 1,
//      'path' => drupal_get_path('module', 'dandelion') . '/pages',
//    );
//  }
//}
//
///**
// * Implements hook_ctools_plugin_directory().
// */
//function dandelion_ctools_plugin_directory($owner, $plugin_type) {
//  if ($owner == 'ctools' && $plugin_type == 'content_types') {
//    return 'plugins/' . $plugin_type;
//  }
//}
//
///**
// * Implements hook_views_api().
// */
//function dandelion_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'dandelion') . '/views',
//  );
//}

/**
 * Implements hook_page_build().
 */
function dandelion_page_build(&$page) {
  if (path_is_admin(current_path())) {
    $admin_theme = variable_get('admin_theme', '');
    if (!empty($admin_theme)) {
      drupal_add_css(drupal_get_path('module', 'dandelion') . '/css/dandelion.' . $admin_theme . '.css', array(
        'group' => CSS_THEME,
        'weight' => 1000,
      ));
    }
  }
}

/**
 * Implements hook_block_info().
 */
function dandelion_block_info() {
  $blocks = array();

  $blocks['notes_menu'] = array(
    'info' => t('Notes menu'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['notes_admin'] = array(
    'info' => t('Notes admin menu'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dandelion_block_view($delta = '') {
  $block = array();

  $menu = NULL;
  $admin_menu = NULL;

  $alias = 'notes';
  $path = drupal_lookup_path('source', $alias);
  $node = menu_get_object('node', 1, $path);

  if (!empty($node)) {
    $tree = menu_tree_all_data($node->book['menu_name']);
    menu_tree_add_active_path($tree);
    $menu = menu_tree_output($tree);

    $links = array();
    $child_type = variable_get('book_child_type', 'book');

    if (user_access('add content to books') && node_access('create', $child_type) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
      $links['book_add_child'] = array(
        'title' => t('Add a page'),
        'href' => 'node/add/' . str_replace('_', '-', $child_type),
        'query' => array('parent' => $node->book['mlid']),
      );
    }

    if (user_access('administer book outlines')) {
      $links['book_outline'] = array(
        'title' => t('Re-order pages'),
        'href' => 'admin/content/' . str_replace('_', '-', $child_type) . '/' . $node->nid,
      );
    }

    if (user_access('access printer-friendly version')) {
      $links['book_printer'] = array(
        'title' => t('Printable version'),
        'href' => 'book/export/html/' . $node->nid,
      );
    }

    $admin_menu = array(
      '#theme' => 'links__node__book',
      '#links' => $links,
      '#attributes' => array('class' => array('links')),
    );
  }

  switch ($delta) {
    case 'notes_menu':
      $block['subject'] = t('Notes menu');
      $block['content'] = $menu;
      break;

    case 'notes_admin':
      $block['subject'] = t('Notes admin menu');
      $block['content'] = $admin_menu;
      break;
  }

  return $block;
}

/**
 * Implements hook_form_alter().
 */
function dandelion_form_alter(&$form, &$form_state, $form_id) {
  // Set height of CKEditor instances.
  if (module_exists('ckeditor')) {
    $instances = array(
      array(
        'form_id' => 'comment_node_book_form',
        'field_name' => 'comment_body',
        'height' => 300,
      ),
    );
    foreach ($instances as $instance) {
      if ($form_id == $instance['form_id']) {
        if (isset($form_state['field'][$instance['field_name']])) {
          $field_language = $form[$instance['field_name']]['#language'];
          $id = 'edit-' . $instance['field_name'] . '-' . $field_language . '-0-value';
          $id = str_replace('_', '-', $id);
          drupal_add_js(array('ckeditor' => array('instanceConfig' => array($id => array('height' => $instance['height'] . 'px')))), 'setting');
        }
        break;
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function dandelion_node_view($node, $view_mode, $langcode) {
  // If "print" view, then remove unnecessary node links.
  if ($view_mode == 'print') {
    if (isset($node->content['links'])) {
      unset($node->content['links']);
    }
  }
}

/**
 * Implements hook_preprocess_panels_pane().
 */
function dandelion_preprocess_panels_pane(&$variables) {
  // Build "last updated" message.
  if ($variables['pane']->type == 'node_updated') {
    $variables['content'] = t('Updated: !datetime', array(
      '!datetime' => $variables['content'],
    ));
  }
}

/**
 * Implements hook_image_default_styles().
 */
function dandelion_image_default_styles() {
  $styles = array();

  // Scale
  $sizes = array(
    400,
    800,
    1000,
    1200,
    1600,
    2000,
    2400
  );

  foreach ($sizes as $size) {
    $styles['s_' . $size] = array(
      'label' => $size . ' (' . $size . ' width or height)',
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array('width' => $size, 'height' => $size, 'upscale' => 0),
          'weight' => 0,
        ),
      )
    );
  }

  $styles['og_facebook'] = array(
    'label' => 'Open Graph: Facebook (1200x630)',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 1200, 'height' => 630),
        'weight' => 0,
      ),
    )
  );

  $styles['og_twitter'] = array(
    'label' => 'Open Graph: Twitter (480x250)',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 480, 'height' => 250),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 *
 * @param int $visibility
 * @param string $pages
 * @param string $path Path to check. If empty, then current path is checked.
 * @return boolean
 */
function dandelion_check_path_visibility($visibility, $pages, $path = NULL) {
  if (empty($pages)) {
    return FALSE;
  }

  if ($path === NULL) {
    $path = $_GET['q'];
  }

  $pages = drupal_strtolower($pages);
  $alias = drupal_strtolower(drupal_get_path_alias($path));
  $match = drupal_match_path($alias, $pages);

  if ($alias != $path) {
    $match = $match || drupal_match_path($path, $pages);
  }

  return !($visibility xor $match);
}
